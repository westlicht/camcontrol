/**
\anchor main_page
\mainpage QP-nano Reference Manual
<CENTER><STRONG>For QP-nano version 4.0.xx and higher</STRONG></CENTER>

\image html qp_banner.jpg

- \ref overview
- \ref starting
- \ref PSiCC2
- \ref licensing
- \ref contact

- \ref files_page
- \ref rev_page

\section overview QP-nano Overview

QP-nano has been specifically designed to enable event-driven programming with
concurrent UML-style hierarchical state machines on low-end 8- and 16-bit
single-chip microcontrollers (MCUs), such as 8051, PIC, AVR, MSP430,
68HC08/11/12, R8C/Tiny, and others alike, with a few hundred bytes of RAM and
a few kilobytes of ROM. With QP, coding of modern state machines directly in C
or C++ is a non-issue. <STRONG>No big tools</STRONG> are needed.

\image html qpn_components.jpg

- \subpage qepn_page
- \subpage qfn_page
- \subpage qkn_page

<STRONG>QP-nano</STRONG> requires only 1-2KB of code and just several bytes of
RAM. This tiny footprint, especially in RAM, makes QP-nano ideal for
high volume, <STRONG>cost-sensitive</STRONG> applications, such as motor
control, lighting control, capacitive touch sensing, remote access control,
RFID, thermostats, small appliances, toys, power supplies, battery chargers,
or just about any custom system-on-a-chip (SOC or ASIC) that contains a small
processor inside. Also, because the event-driven paradigm naturally uses the
CPU only when handling events and otherwise can very easily switch the CPU
into a low-power sleep mode (see \ref comparison), QP-nano is particularly
suitable for <STRONG>ultra-low power</STRONG> applications, such as wireless
sensor networks or implantable medical devices.

The following diagram shows the total RAM and ROM size requried for
<STRONG>QP-nano</STRONG>, full-version QP, small RTOS, and other popular
RTOSes and OSes. Please note the logarithmic axes. 

\image html Fig7.02.jpg

<STRONG>QP-nano</STRONG> is available for download from the following
websites:

- Quantum Leaps website: http://www.state-machine.com/downloads
- SourceForge.net webiste: https://sourceforge.net/projects/qpc

\image html qp_datasheet.gif

The <strong>QP Datasheet</strong>
(see http://www.state-machine.com/products/QP_datasheet.pdf)
provides a concise summary of QP-nano features and benefits.

<HR>

\section starting Getting Started with QP-nano

QP-nano is distributed in a simple platform-independent ZIP file or in a
self-extracing Windows executable. Either way, installing QP-nano requires
simply decompressing the provided archive into a directory of your choice
(e.g., \c qpn for QP-nano). The Section \ref files_page describes the content
of the standard QP-nano distribution.

The <STRONG>QP-nano Tutorial</STRONG> explains all steps necessary to develop
a non-trivial QP-nano application. The Tutorial is based on Chapter 1 of
<I>Practical UML Statecharts in C/C++, Second Edition</I>.

\image html qp_tutorial.jpg

- \subpage tutorial_page
    - \ref installing
    - \ref lets_play
    - \ref main_function
    - \ref design
    - \ref active_objects
    - \ref events
    - \ref coding_hsm
    - \ref execution
    - \ref code_size
    - \ref comparison
    - \ref summary

<HR>


\section PSiCC2 Practical UML Statecharts in C/C++, Second Edition

All versions of QP are described in detail in the book <I>Practical UML
Statecharts in C/C++, Second Edition: Event-Driven Programming for Embedded
Systems</I>, Newnes 2008 (ISBN-10: 0750687061, ISBN-13: 978-0750687065).

\image html PSiCC2_250x200.jpg

The book bridges the gap between high-level abstract concepts of the Unified
Modeling Language (UML) and the actual programming aspects of modern
hierarchical state machines (UML statecharts).

This book is presented in two parts. In Part I, you get a practical
description of the relevant state machine concepts starting from traditional
finite state automata to modern UML state machines followed by state machine
coding techniques with the %QEP hierarchical event processor as well as
several state-machine design patterns, all illustrated with executable
examples.

In Part II, you find a detailed design study of the %QF real-time framework,
%QK preemptive kernel, and %QS software tracing, which are indispensable for
combining concurrent, event-driven state machines into robust systems. In
addition to its value as a reference to the %QP event-driven platform, Part II
explans the key event-driven programming concepts such as inversion of control
("Hollywood Principle"), blocking versus non-blocking code, run-to-completion
(RTC) execution semantics, the importance of event queues, dealing with time,
and the role of state machines to maintain the context from one event to the
next. This background is designed to help software developers in making the
transition from the traditional sequential to the modern event-driven
programming, which can be one of the trickiest paradigm shifts.

- Visit the accompanying website to the book at
http://www.state-machine.com/psicc2/ - Order the book from Amazon.com at
http://www.amazon.com/exec/obidos/ASIN/0750687061/quantumleap06-20

<HR>


\section licensing Licensing Policy for QP-nano

All versions of the QP software, including QP-nano, are available under <A
HREF="http://www.state-machine.com/licensing/">dual licensing</A> model, in
which both the open source software distribution mechanism and traditional
closed source software licensing models are combined.

\subsection open Open Source Licensing

All versions of the QP software are available under the  \ref gpl2_page
(GPL2), as published by the Free Software Foundation and included in every
distribution of the QP software. The GPL2 license is probably the best known
and most established open source license. It is fully compatible with the Open
Source Definition, is endorsed by the Free Software Foundation, and has been
approved by the Open Source Initiative.

Please note that GPL2 applies to software based not upon how it is used but
upon how it is distributed. In this respect GPL2 can be restrictive, because
GPL2 Section 2(b) requires that if you distribute the original software or any
derivative works based on the software under copyright law, you must release
all such derivative works also under the terms of the GPL2 open source
license. GPL2 clearly specifies that distributing the original software or any
derivative works based upon it in binary form (e.g., embedded inside devices)
also represents distribution of the software.

To read more about open source licensing for QP or QP-nano, or to
contribute work to the open source community, please visit the following
website:

- http://www.state-machine.com/licensing/open.htm - \ref gpl2_page

or please contact Quantum Leaps, LLC via the following e-mail address:

- dev@quantum-leaps.com


\subsection closed Closed Source Licensing

If you are developing and distributing traditional <b>closed source</b>
applications, you might purchase one of the Quantum Leaps commercial licenses,
which are specifically designed for users interested in retaining the
proprietary status of their code. This alternative licensing is possible,
because Quantum Leaps, LLC owns all intellectual property in the QP and
QP-nano software and as the copyright owner can license the software any
number of ways. The Quantum Leaps commercial licenses expressly supersede the
\ref gpl2_page open source license. This means that when you license the
software under a commercial license, you specifically do not use the software
under the open source license and therefore you are not subject to any of its
terms.

To read more about the commercial licensing options, pricing, technical
support, and to request a commercial license, please visit the following
website:

- http://www.state-machine.com/licensing

or please contact Quantum Leaps, LLC via the following e-mail address:

- info@quantum-leaps.com

<HR>

\section contact Contact Information

- Quantum Leaps Web site:  http://www.state-machine.com - Quantum Leaps
licensing: http://www.state-machine.com/licensing - Quantum Leaps downloads:
http://www.state-machine.com/downloads - e-mail: info@quantum-leaps.com -
Skype: quantum-leaps (US Eastern Standard Time) - Toll-free: 1-866-450-LEAP
(US Eastern Standard Time)

\image html logo_ql_TM.jpg
Copyright &copy; 2002-2008 Quantum Leaps, LLC. All Rights Reserved.\n
http://www.state-machine.com */

/**
\page qepn_page QEP-nano Hierarchical Event Processor

\image html logo_qepn_TM.jpg

Quantum Event Processor&tm;-nano (%QEP-nano) is a generic, portable, and
reusable hierarchical event processor that processes events according to the
general semantics of UML state machines [<A
HREF="http://www.omg.org/docs/ptc/03-08-02.pdf">UML document
ptc/03-08-02</A>]. %QEP&tm;-nano allows you to map UML state diagrams directly
and clearly to code without the assistance of complex tools. It allows you to
create better designs because you can think in terms of events, states, and
transitions directly at the level of the C programming language. The resulting
code is smaller, cleaner, more robust, and simpler to understand and maintain.
The testing is faster, more rigorous, and more complete because state machine
approach cleanly defines a limited state space for the system and constraints
the possible transitions among the states.

%QEP&tm;-nano provides facilities for executing <STRONG>Hierarchical State
Machines</STRONG> (HSMs) as well as the simpler traditional <STRONG>Finite
State Machines</STRONG> (FSMs). %QEP-nano can operate with almost any event
queuing and dispatching mechanisms, which are also necessary components of a
hypothetical state machine [<A
HREF="http://www.omg.org/docs/ptc/03-08-02.pdf">ptc/03-08-02</A>]. For
example, %QEP-nano can be used with virtually any event-driven environment,
such as any Graphical User Interface system. When used in the domain of
real-time embedded (RTE) systems, %QEP can be combined with other
<STRONG>QP-nano</STRONG> components designed specifically for RTE systems.
%QEP-nano is described in Chapter 12 of the book \ref PSiCC2, Newnes 2008.

Please refer to Section \ref coding_hsm in the \ref tutorial_page for
information on coding UML-compliant hierarchical state machines with QEP-nano.

\image html logo_ql_TM.jpg
Copyright &copy; 2002-2008 Quantum Leaps, LLC. All Rights Reserved.\n
http://www.state-machine.com */

/**
\page qfn_page QF-nano Real-Time Framework

\image html logo_qfn_TM.jpg

Quantum Frameowrk&tm;-nano (%QF-nano) is a reusable event-driven application
framework for executing concurrent state machines specifically designed for
low-end 8- and 16-bit MCUs. The use of QF-nano generally simplifies the design
of event-driven software by allowing the application to be divided into
multiple active objects  that the framework manages. Active objects in
%QF-nano are encapsulated tasks (each embedding a state machine and an event
queue) that communicate with one another asynchronously by sending and
receiving events. Within an active object, events are processed sequentially
in a run-to-completion (RTC) fashion, while %QF-nano encapsulates all the
details of thread-safe event exchange and queuing.

Most of %QF&tm;-nano is written in portable ANSI-C, with
microprocessor-specific and compiler-specific code kept to a minimum for ease
of portability. %QF-nano is designed to work with Quantum Event Processor
(%QEP) and either the simple cooperative kernel or fully preemptive kernel
called QK-nano. The framework is very compact, typically taking up about 1-2KB
of code and data (including the \ref qepn_page). %QF is described in Chapter
12 of the book \ref PSiCC2, Newnes 2008.

Please refer to the \ref tutorial_page for information on implementing
event-driven applications with the QF real-time framework and other components
of the QP-nano event-driven platform.

\image html logo_ql_TM.jpg
Copyright &copy; 2002-2008 Quantum Leaps, LLC. All Rights Reserved.\n
http://www.state-machine.com */

/**
\page qkn_page QK-nano Preemptive Run-To-Completion Kernel

\image html logo_qkn_TM.jpg

Quantum Kernel&tm;-nano (%QK-nano) is a tiny preemptive real-time kernel
specifically designed for executing independent tasks in a run-to-completion
(RTC) fashion. As it turns out, the RTC-style processing universally applied
in the \ref qfn_page, and no need for blocking of active objects, allow
%QK-nano to be extremely simple and utilize only a single stack for all tasks
and interrupts.

%QK&tm;-nano is not a standalone product but rather it requires a compatible
version of %QF-nano. %QK-nano doesn't provide event queues, active objects, or
even lookup tables used by the scheduler, because these elements are already
part of the %QF-nano. %QK is described in Chapter 12 of the book \ref PSiCC2,
Newnes 2008.

Please refer to Section \ref execution in the \ref tutorial_page how to use
the QK-nano kernel in an example.

\image html logo_ql_TM.jpg
Copyright &copy; 2002-2008 Quantum Leaps, LLC. All Rights Reserved.\n
http://www.state-machine.com */

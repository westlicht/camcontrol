/**
\page rev_page QP-nano Revision History

\section qpn_4_0_04 Version 4.0.04 (Product) Release date: Apr 09, 2009

The maintenance release provides a fix for the compile-time assertions,
which did not work correctly for the GNU compiler family. Also, the ARM
Cortex-M3 examples have been recompiled with the newer IAR EWARM v5.30.

This maintenance release does not change the QP-nano API in any way, so the
release has NO IMPACT on the QP-nano applications. 

The main changes in QP v4.0.04 with respect to earlier version are as follows:

- in qassert.h file the #Q_ASSERT_COMPILE macro has been modified to render
a negatuive array dimension when the asserted condition is not TRUE.


\section qpn_4_0_03 Version 4.0.03 (Product)
Release date: August 06, 2008

The main purpose of this release is to "future-proof" the QK-nano preemptive
kernel. The release 4.0.03 strictly preserves the semantics of QK_currPrio_
variable, which was violated by the previous QK mutex implementation.
The mutex locking now uses a different variable QK_ceilingPrio_, which
represents the ceiling-priority locked by the mutex. When the mutex is
configured (the macro #QK_MUTEX is defined), the QK-nano scheduler
performs an additional check to make sure that only tasks with priorities
above the ceiling can run. This additional overhead is not present when
#QK_MUTEX is not defined.

This maintenance release does not change the QP-nano API in any way, so the
release has NO IMPACT on the QP-nano applications. 

The main changes in QP v4.0.03 with respect to earlier version are as follows:

- in qkn.c file, changed priority-ceiling mutex implementation to use
the QK_ceilingPrio_ instead of QK_currPrio_. Also added testing priority
against the QK_ceilingPrio_, when the macro QK_MUTEX is defined.


\section qpn_4_0_02 Version 4.0.02 (Product) Release date: August 06, 2008

This maintenace release is made to allow posting events from any active object
to any active object from the top-most initial transtions.

This maintenance release does not change the QP-nano API in any way, so the
release has NO IMPACT on the QP-nano applications. 

The main changes in QP v4.0.02 with respect to earlier version are as follows:

- modified function QF_run() in qfn.c to first loop over all active objects
and initialize their priority attribute based on their location in the
QF_active[] array. The second for-loop triggers only the initial transitions,
but now all priorities are initialized, so active objects can post events to
each others from the initial transiitons.  
- modified function QF_run() in qkn.c in identical way as in qfn.c described
above.


\section qpn_4_0_01 Version 4.0.01 (Product) Release date: June 08, 2008

This maintenace release is made to allow compiling QP-nano with the GNU
compiler for AVR (WinAVR). Specifically, some changes were necessary to
accomodate the non-standard way of hanlding constant data objects allocated
in ROM (PROGMEM) in the GNU compiler for AVR.

This maintenance release does not change the QP-nano API in any way, so the
release has NO IMPACT on the QP-nano applications. 

The main changes in QP v4.0.01 with respect to earlier version are as follows:

- eliminated QF_pCB_ variable from qfn.c and qkn.c. This variable was used to
point to the constant active object control block (QActiveCB) in ROM. The GNU
compliler for AVR could not handle such pointer correctly without
contaminating the code with non-portable and non-standard extensions.

- added Doxygen comments to the qep.h header file.

- in qepn.c file, broken up expressions of the form if (t == path[iq]) ...
into (s = path[iq]; if (t == s) ...). This was done to accommodate the
ImageCraft ICCM8C compiler for PSoC.  


\section qpn_4_0_00 Version 4.0.00 (Product)
Release date: Apr 07, 2008

This milestone release is made for the book \ref PSiCC2. The book describes in
great detail this new release. The older "QP-nano Programmer's Manual" is now
phased out and is replaced with this hyper-lirenked
\ref main_page "QP-nano Reference Manual", which provides very detailed,
easily searchable reference to the software. The book \ref PSiCC2 provies
in-depth discussion of the relevant concepts as well as the design study of
QP v4.0, including QP-nano v4.0 in Chapter 12.

The main changes in QP v4.0 with respect to earlier versions are as follows:

- the coding techniques for hierarchical state machines (HSMs) and the simpler
finite state machines (FSMs) have changed. While the changes are quite simple,
the backward compatibility with QEP-nano 3.x has been broken, meaning that
some manual changes to the state machines implemented with earlier versions
are necessary. Please refer to the "QP-nano Tutorial" Section \ref coding_hsm
for more information about coding state machines with QEP 4.x.
    - The main change is the signature of a state-handler function, which now
    returns simply a byte. This return type (typedef'ed as QState) is the
    status of the event-handling that the state handler conveys to the QEP
    event processor.
    - The macro #Q_TRAN() must now always follow the return statement.
    - The new macro #Q_SUPER() designates the superstate of the given state.
    Again, this macro must follow the return statement.
    - Then two new macros #Q_HANDLED() and #Q_IGNORED() have been added to
    return the status of event handled and event ignored, respectively.

- all callback functions are now consistently called \c #XXX_onYYY():
    - Q_assert_handler() is now Q_onAssert()
    - QF_start() is now QF_onStartup()
    - QF_cleanup() is now QF_onCleanup()

- all callback functions are now consistently called \c XXX_onYYY():
    - Q_assert_handler() is now Q_onAssert()
    - QF_start() is now QF_onStartup()
    - QF_cleanup() is now QF_onCleanup()
- enumerating global active object priorities is no longer necessary.
- the methods of posting events have changed:
    - QF_post(prio, sig, par) is now void QActive_post(me, sig, par)    
    - QF_postISR(prio, sig, par) is now void QActive_postISR(me, sig, par)
- the global variable QF_activeNum has been eliminated
    - instead the constant #QF_MAX_ACTIVE <STRONG>must</STRONG> correspond
      to the exact number of active objects in the application.
- the QEP-nano event processor now works identically as the full-version QEP.
Specifically, the signal of the current event is not used to notify the event
processor that a transition has taken place. This saves a few bytes of code
for every usage of #Q_TRAN().
- all QF-nano and QK-nano functions have been modified to use static variables
instead of stack variables wherever possible. This saves a few bytes of stack
for the "vanilla" kernel. In QK-nano the savings can be more substantial.
- the QP-nano event queues now decrement the head and tail counters. This
leads to wrap-around at zero, which is easier (faster) to test than any other
wrap-around point.
- all examples in the standard QP-nano distribution have been cleaned up and
updated to the latest QP-nano API changes.

  
\section qpn_3_4_01 Version 3.4.01 (Product)
Release date: Sep 25, 2007

This product release adds the backward-compatibility layer so that previous
QP-nano ports continue to work with the new version.

This product release also comes with the updated "QP-nano Programmer's Manual"
that now includes the QK-nano preemptive kernel.


\section qpn_3_4_00 Version 3.4.00 (Beta)
Release date: Sep 03, 2007

This release brings several changes with the overall goal of simplifying and
improving consistency across the whole QP family of frameworks (QP/C, QP/C++,
and QP-nano).

This release includes simplifying of the C naming conventions (see the
updated Application Note
<A HREF="http://www.state-machine.com/doc/AN_QL_Coding_Standard.pdf"> "QL
C/C++ Coding Standard"</A>). The double-underscore suffix for private data
members of structures is no longer used. Single underscore is used still only
for internal QP-nano facilities that typically should not be used by the
application programmer.

The main changes are made to the QEP-nano component. The new functions
QFsm_init() and QHsm_init() have been added for FSMs and HSMs, respectively.
These APIs are for initializing a state machine by triggering the top-most
initial transition. The application programmer now needs to provide the
top-most initial *pseudostate* that defines the initial transition, just
like it is done in QP/C and QP/C++.

NOTE: the previous QP-nano technique of providing the whole top-most initial
state handler will still work, but it takes more code and is not recommended
in the future designs.

The other big change in this release is including the QK-nano component
in the distribution. Previously, the QK-nano component was available only
under the commercial licensing. It is now open source, just as the rest
of QP-nano.


\section qpn_1_5_07 Version 1.5.07 (Product)
Release date: Mar 08, 2007\n

The only change in this release is removing the 'const' declaration
of a temporary variable inside QHsm_dispatch() function. This was necessary
to compile the code with the MPLAB C18 compiler for PIC18 devices.
\n
The changes in release 1.5.07 have NO impact on the existing QP-nano ports.\n

-# in file qepn.h, line 92 removed 'const' from the 'QHsmState src'
declaration
-# in file qepn.c changed the version number to "1.5.07".


\section qpn_1_5_06 Version 1.5.06 (Product)
Release date: Jan 28, 2007\n

The main change in this release is adding the macro #Q_REENTRANT for all
functions that might be called from various threads of control (when
the preemptive QK-nano is used). The macro #Q_REENTRANT is used in the
postfix syntax, which is how the Keil C51 compiler uses the extended keyword
"reentrant" to indicate reentrant functions.\n
\n
The changes in release 1.5.06 have NO impact on the existing QP-nano ports,
because the empty default definition for the #Q_REENTRANT macro provided in
"qeph.h" should be adequate for all these ports.\n

-# in file qepn.h added default empty definitions and Doxygen comments for
macros #Q_REENTRANT.
-# in file qepn.h added macro #Q_REENTRANT to the signature of functions that
must be reentrant
-# in file qfn.h added macro #Q_REENTRANT to the signature of functions that
must be reentrant
-# in file qkn.h added macro #Q_REENTRANT to the signature of functions that
must be reentrant
-# in file qepn.c added macro #Q_REENTRANT to the signature of functions that
must be reentrant
-# in file qfn.c added macro #Q_REENTRANT to the signature of functions that
must be reentrant
-# in file qkn.c added macro #Q_REENTRANT to the signature of functions that
must be reentrant
-# in file qepn.c changed the copyright notice and the version number
to "1.5.06".


\section qpn_1_5_05 Version 1.5.05 (Product)
Release date: Dec 13, 2006\n

The main change in this release is adding the macro #Q_ROM_VAR for all
constant objects allocated in ROM. The #Q_ROM_VAR macro has been added
for the compilers like Freescale HC(S)08, which require far pointers to
access the objects in ROM. Please note that specifying the pointer size
for accessing a ROM objects is syntactically different than specifying
that the object is allocated in ROM (see macro #Q_ROM).\n

The changes in release 1.5.05 have NO impact on the existing QP-nano ports,
because the empty default definition for the #Q_ROM_VAR macro should be
adequate for all these ports.\n

-# in file qassert.h added macro #Q_ROM_VAR for objects allocated in ROM
and to signatures of functions accessing these objects.
-# in file qepn.h added macro #Q_ROM_VAR for objects allocated in ROM
and to signatures of functions accessing these objects.
-# in file qepn.h added default empty definitions and Doxygen comments for
macros #Q_ROM and #Q_ROM_VAR.
-# in file qfn.h added macro #Q_ROM_VAR for objects allocated in ROM
and to signatures of functions accessing these objects.
-# in file qepn.c added macro #Q_ROM_VAR for objects allocated in ROM
and to signatures of functions accessing these objects.
-# in file qfn.c added macro #Q_ROM_VAR for objects allocated in ROM
and to signatures of functions accessing these objects.
-# in file qkn.c added macro #Q_ROM_VAR for objects allocated in ROM
and to signatures of functions accessing these objects.
-# in file qepn.c changed the copyright notice and the version number
to "1.5.05".


\section qpn_1_5_04 Version 1.5.04 (Product)
Release date: Dec 11, 2006\n

The main change in this release is removing "#include <stdint.h>" from the
qepn.h header file. This has been done becasue vast majority of embedded
compilers for small MCUs actually do not provide the C-99 Standard header
file <stdint.h>. Worse, compilers such as Freescale HC(S)08 C/C++ compiler
will not include <stdint.h> unless it's in the compilers's include directory,
even though the stdint.h file might be in the compiler include path.\n
\n
Removing the "#include <stdint.h>" from qep.h header file allows more
flexibility in the way the standard exact-width integer types are defined.
For compilers that do not provide the <stdint.h> file, you provide the
typedef's in the qpn_port.h file before including qepn.h. For compilers
that do provide the <stdint.h> header file, you simply include this file
in the qpn_port.h header file before including qepn.h.
\n
The changes in release 1.5.04 have impact on all QP-nano ports, because
you need to modify the qpn_port.h file in all these ports.\n

-# in file qepn.h removed "#include <stdint.h>".
-# in file qepn.h fixed incorrect macros #QFsm_getState() and
#QHsm_getState() to get the current state of the state machine.
-# in file qfn.h changed the copyright notice.
-# in file qkn.c changed the copyright notice.
-# in file qepn.c changed the copyright notice and the version number
to "1.5.04".


\section qpn_1_5_03 Version 1.5.03 (Product)
Release date: Nov 12, 2006\n

This release adapts the QP-nano code to the shortcomings of the gcc compiler
for handling data in program ROM for Harvard architecture CPUs, such as the
Atmel's AVR or the 8051. In such machines, the data space (RAM) and program
space (ROM) are accessed with different instructions. The gcc compiler
does not automatically synthesize the correct code for accessing data placed
in the program ROM, even though the __attribute__((__progmem__)) is used.
The workaround for the gcc is to add special assembly instructions to
transfer the data from the program space to the data space. This version of
QP-nano adds macros for each data element allocated to the program space
(delcared with the Q_ROM attribute).\n
\n
Please note that commercial compilers, such as IAR, handle data allocated
in the program space (ROM) correctly and do not need any workarounds.

-# in file qepn.c changed the version number to "1.5.03".
-# in file qfn.c added the Q_ROM_BYTE() and Q_ROM_PTR() macros around each
data element allocated to the program space (declared with Q_ROM attribute).
-# in file qkn.c added the Q_ROM_BYTE() and Q_ROM_PTR() macros around each
data element allocated to the program space (declared with Q_ROM attribute).


\section qpn_1_5_02 Version 1.5.02 (Product)
Release date: Nov 04, 2006\n

This release corrects the initial transition processing in the QK-nano
configuration. Also, a new interrupt locking policy inside interrups is
introduced (inside the QF_postISR() function). This locking policy corresponds
to "saving and restoring interrupt status", which is useful to unlock
interrupts only to a certain level, but keep the interrupts locked below that
level.

-# in file qepn.c changed the version number to "1.5.02".
-# in file qfn.h added doxygen comment to QF_readySet_.
-# in file qkn.c moved the setting of QF_readySet_ before the call
to QK_schedule.
-# in file qfn.c introduced macros QF_ISR_KEY_TYPE and QF_ISR_LOCK()/
QF_ISR_UNLOCK().
-# updated the "QP-nano Programmer's Manual"


\section qpn_1_5_01 Version 1.5.01 (Product)
Release date: Oct 16, 2006\n

This release makes no changes to the core QP-nano code, but corrects
nested interrupt handling in the 80x86 example of PELICAN crossing
with QK-nano. Additionally, alternative interrupt handling without
allowing the interrupt nesting is demonstrated.

-# in file qepn.c changed the version number to "1.5.01".
-# in file examples/80x86/tcpp101/pelican-qk/bsp.c corrected the tick ISR
and added another option for the case when interrupt nesting is not allowed.
Also added note comments at the end of the file.
-# in file examples/80x86/tcpp101/pelican/bsp.c added an optional
implementation of the tick ISR for the case when interrupt nesting is allowed.
Also added note comments at the end of the file.
-# updated the "QP-nano Programmer's Manual"


\section qpn_1_5_00 Version 1.5.00 (Product)
Release date: Sep 17, 2006\n

This release changes the licensing of QP-nano. The QEP-nano and QF-nano
components are released under the dual-license (GPL and commercial).
The QK-nano component is left as commercial only.

To enable the separate use of QEP-nano, QF-nano, and QK-nano, the header
file qpn.h has been split into three files qepn.h, qfn.h, and qkn.h.

-# deleted header file qpn.h
-# added header file qepn.h
-# added header file qfn.h
-# added header file qkn.h
-# in file qkn.h added definition of the macro QK_PREEMPTIVE, so that
including this qkn.h in qpn_port.h automatically configures QK-nano.
-# in file qkn.c added compilation error to check that QK_PREEMTIVE is
indeed defined (meaning that qkn.h has been included in qpn_port.h)
-# consistently changed copyright notes in the QP-nano examples without
QK-nano to relfect open-source (GPL) licensing.
-# updated the "QP-nano Programmer's Manual"


\section qpn_1_4_00 Version 1.4.00 (Product)
Release date: Aug 20, 2006\n

This release addresses the potential initialization problem, when active
objects want to post events to each other or to self during the top-most
initial transition.

The initialization sequence now requires only calling the QActive_ctor()
constructor, but you no longer need to explicitly call QHsm_init()
(or QFsm_init() for the non-hierarchical state machine) to trigger the
top-most initial transition. The top-most initial transition is now executed
automatically by the framework.

-# in file qpn.h added QFsm_ctor(), QHsm_ctor(), and QActive_ctor().
-# in file qpn.h removed QFsm_init() and QHsm_init().
-# in file qepn.c changed QP_getVersion() to allocate the version string
in ROM (if possible) and incremented the version number to 1.4.00
-# in file qfn.c modified QF_run() to initialize the QF_readySet_ to process
the initialization event in all active objects.
-# in file qkn.c modified QF_run() to initialize the QF_readySet_ to process
the initialization event in all active objects. Also commented out the
inclusion of qassert.h, which is currently not used in this module.
-# updated all examples and QDKs-nano to use the new initialization sequence.
-# updated the "QP-nano Programmer's Manual"


removed unlocking interrupts before invoking the
QF_onIdle() callback. This was done to prevent a race condition in
determining the idle condition. The idle condition (no events in any
event queues) can be changed at any time by an interrupt. If interrupts
were unlocked before calling QF_onIdle(), and interrupt could post an
event to a queue, but the QF_onIdle() would put the CPU to low-power mode,
thus preventing the processing of the event until the next interrupt.<br>
<br>
The modification changes the semantics and responsibilities of QF_onIdle(),
which now MUST at least unlock interrupts. A failure to unlock interrupts
in QF_onIdle() will leave the interrupts locked all the time and would
prevent the application from running.<br>
-# in file qpn.h changed the comments for QF_onIdle()
-# in file qpn.h added new idle callback QK_onIdle(), which in contrast
to QF_onIdle() is invoked with interrupts unlocked.
-# in file qk.c replaced the callback QF_onIdle() with the new one
QK_onIdle().
-# in file qepn.c changed the version number to 1.3.00


\section qpn_1_3_00 Version 1.3.00 (Product)
Release date: Jul 27, 2006\n

-# in file qfn.c removed unlocking interrupts before invoking the
QF_onIdle() callback. This was done to prevent a race condition in
determining the idle condition. The idle condition (no events in any
event queues) can be changed at any time by an interrupt. If interrupts
were unlocked before calling QF_onIdle(), and interrupt could post an
event to a queue, but the QF_onIdle() would put the CPU to low-power mode,
thus preventing the processing of the event until the next interrupt.<br>
<br>
The modification changes the semantics and responsibilities of QF_onIdle(),
which now MUST at least unlock interrupts. A failure to unlock interrupts
in QF_onIdle() will leave the interrupts locked all the time and would
prevent the application from running.<br>
-# in file qpn.h changed the comments for QF_onIdle()
-# in file qpn.h added new idle callback QK_onIdle(), which in contrast
to QF_onIdle() is invoked with interrupts unlocked.
-# in file qk.c replaced the callback QF_onIdle() with the new one
QK_onIdle().
-# in file qepn.c changed the version number to 1.3.00


\section qpn_1_2_00 Version 1.2.00 (Product)
Release date: May 31, 2006\n

-# added QK-nano component for preemptive multitasking option
-# used the eZ430-F2013 USB stick instead of 8051 SiLabs Toolstick in the
   examples
-# added QK-nano demonstration in the pelican-qk example for x86
-# updated "QP-nano Programmer's Manual"


\section qpn_1_1_00 Version 1.1.00 (Beta)
Release date: May 20, 2006\n

-# added "QP-nano Programmer's Manual"

\section qpn_1_0_00 Version 1.0.00 (Initial)
Release date: May 15, 2006\n

-# created
*/

